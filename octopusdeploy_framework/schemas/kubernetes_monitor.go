package schemas

import (
	"regexp"

	"github.com/OctopusDeploy/go-octopusdeploy/v2/pkg/kubernetesmonitors"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/boolplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

const KubernetesMonitorResourceName = "kubernetes_monitor"

type KubernetesMonitorResourceModel struct {
	ID                         types.String `tfsdk:"id"`
	SpaceID                    types.String `tfsdk:"space_id"`
	InstallationID             types.String `tfsdk:"installation_id"`
	MachineID                  types.String `tfsdk:"machine_id"`
	AuthenticationToken        types.String `tfsdk:"authentication_token"`
	CertificateThumbprint      types.String `tfsdk:"certificate_thumbprint"`
	PreserveAuthenticationToken types.Bool   `tfsdk:"preserve_authentication_token"`
}

func (s KubernetesMonitorSchema) GetResourceSchema() schema.Schema {
	return schema.Schema{
		Description: "Manages a Kubernetes Monitor in Octopus Deploy.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Description: "The unique ID for this resource.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"space_id": schema.StringAttribute{
				Description: "The space ID associated with this resource.",
				Optional:    true,
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"installation_id": schema.StringAttribute{
				Description: "A unique identifier for this Kubernetes monitor installation.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
				Validators: []validator.String{
					stringvalidator.RegexMatches(
						uuidRegex,
						"must be a valid UUID",
					),
				},
			},
			"machine_id": schema.StringAttribute{
				Description: "The ID of the Kubernetes Agent deployment target machine.",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"authentication_token": schema.StringAttribute{
				Description: "The authentication token for the Kubernetes monitor. This is generated by Octopus and should be stored securely.",
				Computed:    true,
				Sensitive:   true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"certificate_thumbprint": schema.StringAttribute{
				Description: "The certificate thumbprint used to verify the connection to the Octopus server.",
				Computed:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"preserve_authentication_token": schema.BoolAttribute{
				Description: "Controls whether the authentication token should be preserved during re-registration. If not supplied (null), the token will be regenerated (default behavior). If false, the token will be regenerated. If true, the existing token will be preserved.",
				Optional:    true,
				PlanModifiers: []planmodifier.Bool{
					boolplanmodifier.RequiresReplace(),
				},
			},
		},
	}
}

type KubernetesMonitorSchema struct{}

// MapFromKubernetesMonitorToState maps a Kubernetes monitor to the Terraform state
func MapFromKubernetesMonitorToState(
	data *KubernetesMonitorResourceModel, monitor *kubernetesmonitors.KubernetesMonitor,
	authToken, certThumbprint string,
) {
	data.ID = types.StringValue(monitor.ID)
	data.SpaceID = types.StringValue(monitor.SpaceID)
	data.MachineID = types.StringValue(monitor.MachineID)

	if monitor.InstallationID != nil {
		data.InstallationID = types.StringValue(monitor.InstallationID.String())
	}

	if authToken != "" {
		data.AuthenticationToken = types.StringValue(authToken)
	}

	if certThumbprint != "" {
		data.CertificateThumbprint = types.StringValue(certThumbprint)
	}

	// Note: PreserveAuthenticationToken is preserved from the existing state
	// as it's an input-only field that controls registration behavior
}

var uuidRegex = regexp.MustCompile(`^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$`)
