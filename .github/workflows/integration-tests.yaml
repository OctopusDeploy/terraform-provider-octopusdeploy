# This workflow splits the tests to run across multiple nodes. This significantly reduces the testing time, as the
# tests require starting Octopus, MSSQL, and then running Terraform against the Octopus instance.
# See # Refer to https://github.com/hashicorp-forge/go-test-split-action for more information on how the tests are split.

name: Tests
'on':
  workflow_dispatch: {}
  pull_request:

jobs:
  tests:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        parallel: [ 15 ]
        index: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14 ]

    steps:
      - uses: actions/checkout@v3
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Set up Go
        uses: actions/setup-go@v2
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Install Python JWT module
        run: pip install jwt
      # In order to test git integration, we need a token generated from a JWT.
      # The first step is to generate a JWT from the GitHub App private key.
      # https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-a-json-web-token-jwt-for-a-github-app#example-using-python-to-generate-a-jwt
      - name: Generate a JWT
        run: ./github-app-jwt.py >> "$GITHUB_ENV"
        env:
          GH_APP_ID: ${{ secrets.GH_APP_ID }}
          GH_APP_PRIVATE_KEY: ${{ secrets.GH_APP_PRIVATE_KEY }}
      # The next step is to generate an access token from the JWT.
      # https://docs.github.com/en/apps/creating-github-apps/authenticating-with-a-github-app/generating-an-installation-access-token-for-a-github-app#generating-an-installation-access-token
      - name: Generate an access token
        run: |
          curl \
          --silent \
          --request POST \
          --url "https://api.github.com/app/installations/${GH_APP_INSTALLATION_ID}/access_tokens" \
          --header "Accept: application/vnd.github+json" \
          --header "Authorization: Bearer ${{ env.jwt }}" \
          --header "X-GitHub-Api-Version: 2022-11-28" | jq -r '"GIT_CREDENTIAL=" + .token' > "$GITHUB_ENV"
        env:
          GH_APP_INSTALLATION_ID: ${{ secrets.GH_APP_INSTALLATION_ID }}
      - name: Download JUnit Summary from Previous Workflow
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow_conclusion: success
          name: junit-test-summary
          if_no_artifact_found: warn
          branch: main
      - name: Install Dependencies
        run: go get ./...
        shell: bash
      - name: Build the Terraform provider from source
        run: go build -o terraform-provider-octopusdeploy
      - name: Override the location used by Terraform provider
        run: |-
          cat <<EOT >> ~/.terraformrc
          provider_installation {
              dev_overrides {
                "octopusdeploylabs/octopusdeploy" = "${{ github.workspace }}"
            }
            direct {}
          }
          EOT
      - name: Test
        run: go test ./...
        shell: bash
        env:
          LICENSE: ${{ secrets.OCTOPUS_SERVER_BASE64_LICENSE }}
          ECR_ACCESS_KEY: ${{ secrets.ECR_ACCESS_KEY }}
          ECR_SECRET_KEY: ${{ secrets.ECR_SECRET_KEY }}
          GIT_USERNAME: x-access-token
          OCTODISABLEOCTOCONTAINERLOGGING: true
          OCTOTESTSKIPINIT: true
          GOMAXPROCS: 1
          OCTOTESTVERSION: latest
          OCTOTESTIMAGEURL: docker.packages.octopushq.com/octopusdeploy/octopusdeploy
          OCTOTESTRETRYCOUNT: 1

permissions:
  id-token: write
  checks: write
  contents: write
